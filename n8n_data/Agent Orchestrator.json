{
  "name": "Agent Orchestrator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "orchestrate",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [-960, 240],
      "id": "webhook-orchestrate",
      "name": "Start Orchestration",
      "webhookId": "orchestrate-maestro"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "analysis_id",
              "value": "={{ $json.body.analysis_id }}",
              "type": "string"
            },
            {
              "id": "field2",
              "name": "request_id",
              "value": "={{ $json.body.request_id }}",
              "type": "string"
            },
            {
              "id": "field3",
              "name": "project_id",
              "value": "={{ $json.body.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-760, 240],
      "id": "keep-input-data",
      "name": "Keep Input Data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT a.*, r.request_text as original_request, r.status as request_status\nFROM maestro.analyses a\nJOIN maestro.requests r ON a.request_id = r.id\nWHERE a.id = $1::uuid",
        "options": {
          "queryReplacement": "={{ [$('Keep Input Data').item.json.analysis_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-560, 240],
      "id": "fetch-analysis",
      "name": "Fetch Analysis from DB",
      "credentials": {
        "postgres": {
          "id": "TxOzBdadKcgasYEn",
          "name": "MAESTRO DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE maestro.requests SET status = 'ORCHESTRATING', updated_at = NOW() WHERE id = $1::uuid",
        "options": {
          "queryReplacement": "={{ [$('Keep Input Data').item.json.request_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-360, 240],
      "id": "update-status-orchestrating",
      "name": "Update Status: ORCHESTRATING",
      "credentials": {
        "postgres": {
          "id": "TxOzBdadKcgasYEn",
          "name": "MAESTRO DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extraire l'analyse depuis PostgreSQL\nconst analysis = $input.first().json;\nconst inputData = $('Keep Input Data').first().json;\n\nconsole.log('=== ORCHESTRATOR v2 STARTED (sans CADRAGE) ===');\nconsole.log('Analysis ID:', inputData.analysis_id);\nconsole.log('Complexity:', analysis.complexity);\nconsole.log('Agents needed:', analysis.agents_needed);\n\n// Parser agents_needed (JSONB)\nlet agentsNeeded = [];\ntry {\n  agentsNeeded = typeof analysis.agents_needed === 'string' \n    ? JSON.parse(analysis.agents_needed) \n    : analysis.agents_needed || [];\n} catch(e) {\n  console.error('Error parsing agents_needed:', e);\n  agentsNeeded = [];\n}\n\n// Filtrer CADRAGE s'il est présent (anciennes analyses)\nif (agentsNeeded.includes('CADRAGE')) {\n  console.warn('⚠️ CADRAGE détecté dans agents_needed - suppression (agent déprécié)');\n  agentsNeeded = agentsNeeded.filter(a => a !== 'CADRAGE');\n}\n\n// Déterminer quels agents lancer (workflow simplifié : PM → US → DEV → TEST → DEPLOY)\nconst orchestrationPlan = {\n  analysis_id: inputData.analysis_id,\n  request_id: inputData.request_id,\n  project_id: inputData.project_id,\n  original_request: analysis.original_request,\n  complexity: analysis.complexity,\n  priority: analysis.priority,\n  agents_needed: agentsNeeded,\n  parallel_possible: Boolean(analysis.parallel_possible),\n  \n  // Flags pour routing SÉQUENTIEL (CADRAGE supprimé 2025-10-17)\n  needs_us: agentsNeeded.includes('US'),\n  needs_dev: agentsNeeded.includes('DEV'),\n  needs_test: agentsNeeded.includes('TEST'),\n  needs_deploy: agentsNeeded.includes('DEPLOY'),\n  \n  // Stockage des IDs pour chaînage\n  us_id: null,\n  dev_id: null,\n  \n  timestamp: new Date().toISOString()\n};\n\nconsole.log('Orchestration plan:', orchestrationPlan);\nconsole.log('Workflow: PM → US → DEV → TEST → DEPLOY');\n\nreturn [{ json: orchestrationPlan }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-160, 240],
      "id": "prepare-orchestration",
      "name": "Prepare Orchestration Plan"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_us }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [40, 240],
      "id": "need-us",
      "name": "Need US?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://n8n:5678/webhook/user-stories",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"analysis_id\": $json.analysis_id,\n  \"request_id\": $json.request_id,\n  \"project_id\": $json.project_id,\n  \"request_text\": $json.original_request,\n  \"complexity\": $json.complexity\n} }}",
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [240, 140],
      "id": "call-us-agent",
      "name": "Call US Agent"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "message",
              "value": "No US generation needed",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [240, 340],
      "id": "skip-us",
      "name": "Skip US"
    },
    {
      "parameters": {
        "jsCode": "// Récupérer le plan d'orchestration initial\nconst plan = $('Prepare Orchestration Plan').first().json;\nlet updatedPlan = { ...plan };\n\n// Si US a été exécuté, récupérer les infos\nif ($('Call US Agent').all().length > 0) {\n  const usResponse = $('Call US Agent').first().json;\n  updatedPlan.us_count = usResponse.total_stories || 0;\n  console.log('✅ US completed, stories created:', updatedPlan.us_count);\n} else {\n  console.log('⏭️ US skipped');\n}\n\nreturn [{ json: updatedPlan }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 240],
      "id": "update-plan-after-us",
      "name": "Update Plan After US"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_dev }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [640, 240],
      "id": "need-dev",
      "name": "Need DEV?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "agent",
              "value": "DEV",
              "type": "string"
            },
            {
              "id": "field2",
              "name": "status",
              "value": "placeholder",
              "type": "string"
            },
            {
              "id": "field3",
              "name": "message",
              "value": "Agent DEV pas encore implémenté avec Gitea",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [840, 140],
      "id": "call-dev-placeholder",
      "name": "DEV Agent (TODO)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "message",
              "value": "No DEV generation needed",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [840, 340],
      "id": "skip-dev",
      "name": "Skip DEV"
    },
    {
      "parameters": {
        "jsCode": "// Récupérer le plan mis à jour\nconst plan = $('Update Plan After US').first().json;\nlet updatedPlan = { ...plan };\n\n// Si DEV a été exécuté\nif ($('DEV Agent (TODO)').all().length > 0) {\n  console.log('⏳ DEV placeholder executed');\n} else {\n  console.log('⏭️ DEV skipped');\n}\n\nreturn [{ json: updatedPlan }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1040, 240],
      "id": "update-plan-after-dev",
      "name": "Update Plan After DEV"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_test }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1240, 240],
      "id": "need-test",
      "name": "Need TEST?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "agent",
              "value": "TEST",
              "type": "string"
            },
            {
              "id": "field2",
              "name": "status",
              "value": "placeholder",
              "type": "string"
            },
            {
              "id": "field3",
              "name": "message",
              "value": "Agent TEST pas encore implémenté",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1440, 140],
      "id": "call-test-placeholder",
      "name": "TEST Agent (TODO)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "message",
              "value": "No TEST needed",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1440, 340],
      "id": "skip-test",
      "name": "Skip TEST"
    },
    {
      "parameters": {
        "jsCode": "// Compiler tous les résultats de l'orchestration\nconst orchestrationPlan = $('Update Plan After DEV').first().json;\n\nconst results = {\n  request_id: orchestrationPlan.request_id,\n  analysis_id: orchestrationPlan.analysis_id,\n  project_id: orchestrationPlan.project_id,\n  timestamp: new Date().toISOString(),\n  complexity: orchestrationPlan.complexity,\n  agents_executed: [],\n  us_count: orchestrationPlan.us_count || 0\n};\n\n// Vérifier si US a été exécuté\nif ($('Call US Agent').all().length > 0) {\n  results.agents_executed.push('US');\n  console.log('✅ US completed');\n}\n\n// DEV\nif ($('DEV Agent (TODO)').all().length > 0) {\n  results.agents_executed.push('DEV (placeholder)');\n}\n\n// TEST\nif ($('TEST Agent (TODO)').all().length > 0) {\n  results.agents_executed.push('TEST (placeholder)');\n}\n\nresults.orchestration_status = 'COMPLETED';\nresults.summary = `Orchestration complétée avec ${results.agents_executed.length} agent(s): ${results.agents_executed.join(' → ')}`;\n\nif (results.us_count > 0) {\n  results.summary += ` | ${results.us_count} User Stories créées`;\n}\n\nconsole.log('=== ORCHESTRATION COMPLETE (sans CADRAGE) ===');\nconsole.log('Agents executed:', results.agents_executed.join(' → '));\nconsole.log('User Stories:', results.us_count);\n\nreturn [{ json: results }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1640, 240],
      "id": "compile-results",
      "name": "Compile Results"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE maestro.requests SET status = 'AGENTS_RUNNING', updated_at = NOW() WHERE id = $1::uuid",
        "options": {
          "queryReplacement": "={{ [$('Compile Results').item.json.request_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1840, 240],
      "id": "update-status-running",
      "name": "Update Status: RUNNING",
      "credentials": {
        "postgres": {
          "id": "TxOzBdadKcgasYEn",
          "name": "MAESTRO DB"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($('Compile Results').item.json, null, 2) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [2040, 240],
      "id": "respond-webhook",
      "name": "Respond to Webhook"
    }
  ],
  "connections": {
    "Start Orchestration": {
      "main": [[{"node": "Keep Input Data", "type": "main", "index": 0}]]
    },
    "Keep Input Data": {
      "main": [[{"node": "Fetch Analysis from DB", "type": "main", "index": 0}]]
    },
    "Fetch Analysis from DB": {
      "main": [[{"node": "Update Status: ORCHESTRATING", "type": "main", "index": 0}]]
    },
    "Update Status: ORCHESTRATING": {
      "main": [[{"node": "Prepare Orchestration Plan", "type": "main", "index": 0}]]
    },
    "Prepare Orchestration Plan": {
      "main": [[{"node": "Need US?", "type": "main", "index": 0}]]
    },
    "Need US?": {
      "main": [
        [{"node": "Call US Agent", "type": "main", "index": 0}],
        [{"node": "Skip US", "type": "main", "index": 0}]
      ]
    },
    "Call US Agent": {
      "main": [[{"node": "Update Plan After US", "type": "main", "index": 0}]]
    },
    "Skip US": {
      "main": [[{"node": "Update Plan After US", "type": "main", "index": 0}]]
    },
    "Update Plan After US": {
      "main": [[{"node": "Need DEV?", "type": "main", "index": 0}]]
    },
    "Need DEV?": {
      "main": [
        [{"node": "DEV Agent (TODO)", "type": "main", "index": 0}],
        [{"node": "Skip DEV", "type": "main", "index": 0}]
      ]
    },
    "DEV Agent (TODO)": {
      "main": [[{"node": "Update Plan After DEV", "type": "main", "index": 0}]]
    },
    "Skip DEV": {
      "main": [[{"node": "Update Plan After DEV", "type": "main", "index": 0}]]
    },
    "Update Plan After DEV": {
      "main": [[{"node": "Need TEST?", "type": "main", "index": 0}]]
    },
    "Need TEST?": {
      "main": [
        [{"node": "TEST Agent (TODO)", "type": "main", "index": 0}],
        [{"node": "Skip TEST", "type": "main", "index": 0}]
      ]
    },
    "TEST Agent (TODO)": {
      "main": [[{"node": "Compile Results", "type": "main", "index": 0}]]
    },
    "Skip TEST": {
      "main": [[{"node": "Compile Results", "type": "main", "index": 0}]]
    },
    "Compile Results": {
      "main": [[{"node": "Update Status: RUNNING", "type": "main", "index": 0}]]
    },
    "Update Status: RUNNING": {
      "main": [[{"node": "Respond to Webhook", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "ed02db89d7f2488035bfec7b1491988dab1d203f160701f703954ad6afe22be8"
  }
}

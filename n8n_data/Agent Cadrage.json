{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "cadrage",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [-560, 240],
      "id": "webhook-cadrage",
      "name": "Webhook Cadrage",
      "webhookId": "cadrage-analysis"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "analysis_id",
              "value": "={{ $json.body.analysis_id }}",
              "type": "string"
            },
            {
              "id": "field2",
              "name": "request_id",
              "value": "={{ $json.body.request_id }}",
              "type": "string"
            },
            {
              "id": "field3",
              "name": "request_text",
              "value": "={{ $json.body.request_text }}",
              "type": "string"
            },
            {
              "id": "field4",
              "name": "complexity",
              "value": "={{ $json.body.complexity }}",
              "type": "string"
            },
            {
              "id": "field5",
              "name": "priority",
              "value": "={{ $json.body.priority }}",
              "type": "string"
            },
            {
              "id": "field6",
              "name": "project_id",
              "value": "={{ $json.body.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-360, 240],
      "id": "keep-input-cadrage",
      "name": "Keep Input Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=AIzaSyCh8UXpXbf_E-NtkJC5QbMmbUpRw2zKN1M",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"Tu es l'Architecte Fonctionnel de MAESTRO, expert en analyse des besoins.\\n\\nDemande à analyser:\\n{{ $('Keep Input Data').item.json.request_text }}\\n\\nComplexité estimée: {{ $('Keep Input Data').item.json.complexity }}\\nPriorité: {{ $('Keep Input Data').item.json.priority }}\\n\\nTa mission:\\n1. Définir le périmètre fonctionnel précis\\n2. Identifier toutes les contraintes (techniques, business, légales)\\n3. Proposer une architecture adaptée\\n4. Lister les prérequis et dépendances\\n5. Estimer les ressources nécessaires\\n6. Créer une matrice SWOT\\n\\nRéponds UNIQUEMENT en JSON:\\n{\\n  \\\"perimetre\\\": {\\n    \\\"objectif_principal\\\": \\\"description claire\\\",\\n    \\\"fonctionnalites_core\\\": [\\\"liste des features essentielles\\\"],\\n    \\\"fonctionnalites_nice_to_have\\\": [\\\"features optionnelles\\\"],\\n    \\\"hors_perimetre\\\": [\\\"ce qui n'est PAS inclus\\\"]\\n  },\\n  \\\"contraintes\\\": {\\n    \\\"techniques\\\": [\\\"technologies, performances, compatibilité\\\"],\\n    \\\"business\\\": [\\\"budget, délais, ROI\\\"],\\n    \\\"securite\\\": [\\\"RGPD, authentification, encryption\\\"],\\n    \\\"integration\\\": [\\\"APIs, systèmes existants\\\"]\\n  },\\n  \\\"architecture\\\": {\\n    \\\"type\\\": \\\"monolithe/microservices/serverless\\\",\\n    \\\"stack_recommande\\\": {\\n      \\\"frontend\\\": \\\"technologies\\\",\\n      \\\"backend\\\": \\\"technologies\\\",\\n      \\\"database\\\": \\\"type et tech\\\",\\n      \\\"infrastructure\\\": \\\"cloud/on-premise\\\"\\n    },\\n    \\\"composants_principaux\\\": [\\\"liste des modules/services\\\"]\\n  },\\n  \\\"swot\\\": {\\n    \\\"forces\\\": [\\\"points forts du projet\\\"],\\n    \\\"faiblesses\\\": [\\\"points faibles à anticiper\\\"],\\n    \\\"opportunites\\\": [\\\"opportunités business\\\"],\\n    \\\"menaces\\\": [\\\"risques identifiés\\\"]\\n  },\\n  \\\"estimation\\\": {\\n    \\\"effort_jours\\\": nombre,\\n    \\\"equipe_ideale\\\": [\\\"profils nécessaires avec quantité\\\"],\\n    \\\"budget_estime\\\": \\\"fourchette en K€\\\",\\n    \\\"phases\\\": [\\n      {\\\"nom\\\": \\\"Phase 1\\\", \\\"duree_jours\\\": nombre, \\\"description\\\": \\\"description\\\"}\\n    ]\\n  }\\n}\"\n    }]\n  }],\n  \"generationConfig\": {\n    \"temperature\": 0.6,\n    \"topK\": 40,\n    \"topP\": 0.95,\n    \"maxOutputTokens\": 2048,\n    \"responseMimeType\": \"application/json\"\n  }\n}",
        "options": {
          "timeout": 60000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-160, 240],
      "id": "gemini-cadrage",
      "name": "Gemini Cadrage Analysis"
    },
    {
      "parameters": {
        "jsCode": "// Extraire la réponse Gemini\nconst geminiResponse = $input.first().json;\nconst inputData = $('Keep Input Data').first().json;\n\nconsole.log('=== AGENT CADRAGE ===');\nconsole.log('Analysis ID:', inputData.analysis_id);\n\nlet cadrage = {};\ntry {\n  const textContent = geminiResponse.candidates[0].content.parts[0].text;\n  cadrage = JSON.parse(textContent);\n  console.log('✅ Cadrage parsé avec succès');\n  console.log('Effort estimé:', cadrage.estimation?.effort_jours, 'jours');\n} catch(e) {\n  console.error('❌ Erreur parsing Gemini:', e.message);\n  cadrage = {\n    perimetre: {\n      objectif_principal: 'Erreur de parsing',\n      fonctionnalites_core: [],\n      fonctionnalites_nice_to_have: [],\n      hors_perimetre: []\n    },\n    contraintes: {\n      techniques: [],\n      business: [],\n      securite: [],\n      integration: []\n    },\n    architecture: {\n      type: 'N/A',\n      stack_recommande: {},\n      composants_principaux: []\n    },\n    swot: {\n      forces: [],\n      faiblesses: [],\n      opportunites: [],\n      menaces: []\n    },\n    estimation: {\n      effort_jours: 0,\n      equipe_ideale: [],\n      budget_estime: 'N/A',\n      phases: []\n    }\n  };\n}\n\n// Préparer les paramètres pour PostgreSQL\nconst params = [\n  inputData.analysis_id,\n  JSON.stringify(cadrage.perimetre),\n  JSON.stringify(cadrage.contraintes),\n  JSON.stringify(cadrage.architecture),\n  JSON.stringify(cadrage.swot),\n  JSON.stringify(cadrage.estimation),\n  JSON.stringify(cadrage)\n];\n\nreturn [{ \n  json: { \n    params,\n    cadrage,\n    analysis_id: inputData.analysis_id,\n    summary: {\n      effort_jours: cadrage.estimation?.effort_jours || 0,\n      architecture_type: cadrage.architecture?.type || 'N/A',\n      nb_contraintes: Object.values(cadrage.contraintes || {}).flat().length,\n      nb_fonctionnalites: (cadrage.perimetre?.fonctionnalites_core || []).length\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [40, 240],
      "id": "prepare-cadrage",
      "name": "Prepare Cadrage Data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO maestro.cadrages (\n  analysis_id,\n  perimetre,\n  contraintes,\n  architecture,\n  swot,\n  estimation,\n  full_response\n) VALUES (\n  $1::uuid,\n  $2::jsonb,\n  $3::jsonb,\n  $4::jsonb,\n  $5::jsonb,\n  $6::jsonb,\n  $7::jsonb\n) RETURNING id, created_at;",
        "options": {
          "queryReplacement": "={{ $json.params }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [240, 240],
      "id": "save-cadrage",
      "name": "Save Cadrage to DB",
      "credentials": {
        "postgres": {
          "id": "LZQHq6vDOsI91G4D",
          "name": "MAESTRO DB"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  \"status\": \"success\",\n  \"agent\": \"CADRAGE\",\n  \"message\": \"Cadrage architectural complété\",\n  \"cadrage_id\": $json.id,\n  \"analysis_id\": $('Prepare Cadrage Data').item.json.analysis_id,\n  \"created_at\": $json.created_at,\n  \"summary\": $('Prepare Cadrage Data').item.json.summary\n}, null, 2) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [440, 240],
      "id": "respond-cadrage",
      "name": "Respond Success"
    }
  ],
  "connections": {
    "Webhook Cadrage": {
      "main": [[{"node": "Keep Input Data", "type": "main", "index": 0}]]
    },
    "Keep Input Data": {
      "main": [[{"node": "Gemini Cadrage Analysis", "type": "main", "index": 0}]]
    },
    "Gemini Cadrage Analysis": {
      "main": [[{"node": "Prepare Cadrage Data", "type": "main", "index": 0}]]
    },
    "Prepare Cadrage Data": {
      "main": [[{"node": "Save Cadrage to DB", "type": "main", "index": 0}]]
    },
    "Save Cadrage to DB": {
      "main": [[{"node": "Respond Success", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "ed02db89d7f2488035bfec7b1491988dab1d203f160701f703954ad6afe22be8"
  }
}

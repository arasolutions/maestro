{
  "name": "Agent DEV - Code Generator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dev-generate",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [220, 300],
      "id": "webhook-dev",
      "name": "Webhook Dev Generator",
      "webhookId": "dev-generator"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "field1",
              "name": "analysis_id",
              "value": "={{ $json.body.analysis_id }}",
              "type": "string"
            },
            {
              "id": "field2",
              "name": "user_story_id",
              "value": "={{ $json.body.user_story_id }}",
              "type": "string"
            },
            {
              "id": "field3",
              "name": "story",
              "value": "={{ $json.body.story }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [440, 300],
      "id": "keep-input-dev",
      "name": "Keep Input Data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT p.project_cadrage, p.name as project_name FROM maestro.projects p INNER JOIN maestro.analyses a ON p.id = a.project_id WHERE a.id = $1::uuid",
        "options": {
          "queryReplacement": "={{ $('Keep Input Data').item.json.analysis_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [660, 300],
      "id": "fetch-project-context",
      "name": "Fetch Project Context",
      "credentials": {
        "postgres": {
          "id": "TxOzBdadKcgasYEn",
          "name": "MAESTRO DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $('Keep Input Data').first().json;\nconst projectData = $input.first().json;\nconst story = inputData.story;\n\nconsole.log('=== AGENT DEV ===');\nconsole.log('Story ID:', story.id);\nconsole.log('Story Title:', story.title);\n\n// Extract technical context\nlet cadrage = {};\ntry {\n  cadrage = typeof projectData.project_cadrage === 'string' \n    ? JSON.parse(projectData.project_cadrage) \n    : projectData.project_cadrage || {};\n} catch(e) {\n  console.error('Error parsing project_cadrage:', e);\n}\n\nconst architecture = cadrage.architecture || {};\nconst stack = architecture.stack_recommande || {};\n\nreturn [{\n  json: {\n    user_story_id: inputData.user_story_id,\n    analysis_id: inputData.analysis_id,\n    story: story,\n    project_name: projectData.project_name,\n    \n    // Technical context for code generation\n    backend: stack.backend || 'Symfony 7',\n    database: stack.database || 'PostgreSQL',\n    frontend: stack.frontend || 'Twig + Bootstrap',\n    \n    // Story details\n    title: story.title,\n    as_a: story.as_a,\n    i_want: story.i_want,\n    so_that: story.so_that,\n    acceptance_criteria: story.acceptance_criteria || [],\n    technical_notes: story.technical_notes || '',\n    \n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 300],
      "id": "prepare-dev-context",
      "name": "Prepare Dev Context"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\n\n// Build the prompt text safely\nconst promptText = `Tu es un développeur expert Symfony 7 / PHP 8.2.\n\n=== USER STORY À IMPLÉMENTER ===\nID: ${data.story.id}\nTitre: ${data.title}\n\nUser Story:\n- En tant que: ${data.as_a}\n- Je veux: ${data.i_want}\n- Afin de: ${data.so_that}\n\nCritères d'acceptance:\n${(data.acceptance_criteria || []).map((c, i) => `${i+1}. ${c}`).join('\\n')}\n\n=== CONTEXTE TECHNIQUE ===\nFramework: ${data.backend}\nBase de données: ${data.database}\nFrontend: ${data.frontend}\nNotes techniques: ${data.technical_notes || 'Aucune'}\n\n=== MISSION ===\nGénère le code Symfony nécessaire pour implémenter cette User Story.\nProduis un Controller avec les actions nécessaires, respectant les best practices Symfony.\n\nStructure attendue:\n1. Controller complet avec routes, actions, validation\n2. Code commenté et PSR-12 compliant\n3. Gestion d'erreurs et messages flash\n4. Redirection après succès\n\nRéponds UNIQUEMENT en JSON avec cette structure:\n{\n  \"controller\": {\n    \"filename\": \"NomController.php\",\n    \"path\": \"src/Controller/NomController.php\",\n    \"content\": \"<?php code complet ici...\"\n  },\n  \"entity\": {\n    \"filename\": \"NomEntity.php\",\n    \"path\": \"src/Entity/NomEntity.php\",\n    \"content\": \"<?php code complet ici...\"\n  },\n  \"template\": {\n    \"filename\": \"template.html.twig\",\n    \"path\": \"templates/nom/template.html.twig\",\n    \"content\": \"{% twig code ici %}\"\n  },\n  \"documentation\": \"Description de ce qui a été implémenté et comment l'utiliser\"\n}\n\nSi un fichier n'est pas nécessaire, mets null pour sa valeur.`;\n\n// Build proper Gemini API request with API key in URL\nconst apiKey = 'AIzaSyCh8UXpXbf_E-NtkJC5QbMmbUpRw2zKN1M';\nconst geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=${apiKey}`;\n\nconst geminiPayload = {\n  contents: [{\n    parts: [{\n      text: promptText\n    }]\n  }],\n  generationConfig: {\n    temperature: 0.8,\n    topK: 40,\n    topP: 0.95,\n    maxOutputTokens: 8192,\n    responseMimeType: \"application/json\"\n  }\n};\n\nreturn [{\n  json: {\n    ...data,\n    gemini_url: geminiUrl,\n    gemini_payload: geminiPayload\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 300],
      "id": "prepare-gemini-prompt",
      "name": "Prepare Gemini Prompt"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.gemini_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.gemini_payload }}",
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1320, 300],
      "id": "gemini-code-gen",
      "name": "Gemini Code Generation"
    },
    {
      "parameters": {
        "jsCode": "const geminiResponse = $input.first().json;\nconst contextData = $('Prepare Gemini Prompt').first().json;\n\nconsole.log('=== CODE GENERATION RESULT ===');\nconsole.log('User Story ID:', contextData.user_story_id);\n\nlet generatedCode = {};\ntry {\n  const textContent = geminiResponse.candidates[0].content.parts[0].text;\n  generatedCode = JSON.parse(textContent);\n  console.log('✓ Code generated successfully');\n} catch(e) {\n  console.error('ERROR Parsing Gemini response:', e.message);\n  generatedCode = {\n    controller: null,\n    entity: null,\n    template: null,\n    documentation: 'Erreur lors de la génération du code: ' + e.message\n  };\n}\n\n// Build code_files array for database\nconst codeFiles = [];\n\nif (generatedCode.controller) {\n  codeFiles.push({\n    path: generatedCode.controller.path || 'src/Controller/GeneratedController.php',\n    content: generatedCode.controller.content,\n    type: 'controller',\n    filename: generatedCode.controller.filename || 'GeneratedController.php'\n  });\n}\n\nif (generatedCode.entity) {\n  codeFiles.push({\n    path: generatedCode.entity.path || 'src/Entity/GeneratedEntity.php',\n    content: generatedCode.entity.content,\n    type: 'entity',\n    filename: generatedCode.entity.filename || 'GeneratedEntity.php'\n  });\n}\n\nif (generatedCode.template) {\n  codeFiles.push({\n    path: generatedCode.template.path || 'templates/generated/index.html.twig',\n    content: generatedCode.template.content,\n    type: 'template',\n    filename: generatedCode.template.filename || 'index.html.twig'\n  });\n}\n\nconst params = [\n  contextData.user_story_id,\n  'PHP',\n  'Symfony 7',\n  JSON.stringify(codeFiles),\n  null, // tests (will be generated later by TEST agent)\n  generatedCode.documentation || 'Code généré automatiquement'\n];\n\nreturn [{\n  json: {\n    params,\n    user_story_id: contextData.user_story_id,\n    analysis_id: contextData.analysis_id,\n    generated_code: generatedCode,\n    file_count: codeFiles.length,\n    summary: {\n      controller: generatedCode.controller ? '✓' : '✗',\n      entity: generatedCode.entity ? '✓' : '✗',\n      template: generatedCode.template ? '✓' : '✗'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1540, 300],
      "id": "prepare-code-data",
      "name": "Prepare Code Data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO maestro.generated_code (\n  user_story_id,\n  language,\n  framework,\n  code_files,\n  tests,\n  documentation\n) VALUES (\n  $1::uuid,\n  $2,\n  $3,\n  $4::jsonb,\n  $5::jsonb,\n  $6\n) RETURNING id, created_at;",
        "options": {
          "queryReplacement": "={{ $json.params }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1760, 300],
      "id": "save-generated-code",
      "name": "Save Generated Code",
      "credentials": {
        "postgres": {
          "id": "TxOzBdadKcgasYEn",
          "name": "MAESTRO DB"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  status: 'success',\n  agent: 'DEV',\n  message: 'Code généré avec succès',\n  code_id: $json.id,\n  user_story_id: $('Prepare Code Data').item.json.user_story_id,\n  created_at: $json.created_at,\n  file_count: $('Prepare Code Data').item.json.file_count,\n  summary: $('Prepare Code Data').item.json.summary\n}, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [1980, 300],
      "id": "respond-dev-success",
      "name": "Respond Success"
    }
  ],
  "connections": {
    "Webhook Dev Generator": {
      "main": [[{"node": "Keep Input Data", "type": "main", "index": 0}]]
    },
    "Keep Input Data": {
      "main": [[{"node": "Fetch Project Context", "type": "main", "index": 0}]]
    },
    "Fetch Project Context": {
      "main": [[{"node": "Prepare Dev Context", "type": "main", "index": 0}]]
    },
    "Prepare Dev Context": {
      "main": [[{"node": "Prepare Gemini Prompt", "type": "main", "index": 0}]]
    },
    "Prepare Gemini Prompt": {
      "main": [[{"node": "Gemini Code Generation", "type": "main", "index": 0}]]
    },
    "Gemini Code Generation": {
      "main": [[{"node": "Prepare Code Data", "type": "main", "index": 0}]]
    },
    "Prepare Code Data": {
      "main": [[{"node": "Save Generated Code", "type": "main", "index": 0}]]
    },
    "Save Generated Code": {
      "main": [[{"node": "Respond Success", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  }
}
